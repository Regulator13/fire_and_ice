<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// setup to connect online
global.Server = -1; // -1 client does not have server
global.connectip = "127.0.0.1";
global.InitObject = id;
global.haveserver = false;
global.ServerType = network_socket_udp;

serverlist = ds_list_create();
servernames = ds_list_create();

// Create a server and listen on our broadcast port....
broadcast_server = network_create_server(network_socket_udp, 6511, 100);
// set up menu
directIP = instance_create(154+32+64, room_height-32, obj_textBox);
iServerName = instance_create(room_width-(200+154+32+64), room_height-32, obj_textBox);
iServerName.title = "Player Name";
iServerName.text = "Newbius";

// try to load player name
scr_loadPlayer();

// set menu to treat game as online
global.online = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// destroy created objects
// save player name
scr_savePlayer();

instance_destroy(iServerName);
instance_destroy(directIP);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// direct connect to a remote server
var i = iServerName;
global.ServerName = i.text;
global.connectip = directIP.text;

// destroy broadcast server
network_destroy(broadcast_server);
broadcast_server = -1;

show_debug_message("#######################################");
show_debug_message("Next room");
show_debug_message("#######################################");
    // switch menu to the lobby
    scr_stateSwitch(STATE_ONLINE, STATE_LOBBY);
    // create  client
    instance_create(0, 0, obj_client);
    // client takes care of all networking now
    instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Start game - local client+server
var i = iServerName;
global.ServerName = i.text;

// create server
global.Server = instance_create(0,0,obj_server);

// check if succesful
if(global.haveserver == false ) {
    show_debug_message("Cant create server");
    }
else {
    // tell client to connect to itself
    global.connectip = "127.0.0.1";
    
    // stop broadcasting
    // destroy broadcast server
    network_destroy(broadcast_server);
    broadcast_server = -1;
    show_debug_message("#######################################");
    show_debug_message("Start game");
    show_debug_message("#######################################");
    
    // switch menu to the lobby
    scr_stateSwitch(STATE_ONLINE, STATE_LOBBY);
    
    // create client
    instance_create(0, 0, obj_client);
    // client takes care of all networking now
    instance_destroy();
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Start game - connect to a remote server
var i = iServerName;
global.ServerName = i.text;

// destroy broadcast server
network_destroy(broadcast_server);
broadcast_server = -1;

show_debug_message("#######################################");
show_debug_message("Next room");
show_debug_message("#######################################");
    // switch menu to the lobby
    scr_stateSwitch(STATE_ONLINE, STATE_LOBBY);
    // create  client
    instance_create(0, 0, obj_client);
    // client takes care of all networking now
    instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="56">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Detect clicking on server list

var yindex = 40+30;
var count = ds_list_size(serverlist);
if( mouse_y&gt;70 &amp;&amp; mouse_y&lt;(70+(count*30)) ){
    var picked = floor(((mouse_y-70)/30) );
    global.connectip = ds_list_find_value(serverlist, picked );
    alarm[0] = 2;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// UDP server code - Detect servers "broadcast"
var eventid = ds_map_find_value(async_load, "id");

if( eventid == broadcast_server )
{
    var ip = ds_map_find_value(async_load, "ip");

    // incoming data for the server from a connected saocket
    var buff = ds_map_find_value(async_load, "buffer");
    name = buffer_read(buff, buffer_string );

        
    // Add to our list...if we don't already have it!
    var index = ds_list_find_index(serverlist, ip);
    if( index&lt;0 ){
        ds_list_add(serverlist, ip);
        ds_list_add(servernames, name);
        show_debug_message("New server found at: "+ip+"   called: "+name);
    }    
    
} 

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// return to main

// go offline
global.online = false;

// destroy broadcast
network_destroy(broadcast_server);

// clear buttons
with (global.Menu) {
    for (var i = 0; i &lt; ds_list_size(buttons); i++) {
        with(ds_list_find_value(buttons, i)) instance_destroy();
        }
    ds_list_clear(buttons);
    }
// destory word boxes
instance_destroy(directIP);
instance_destroy(iServerName);

// destroy ds_lists
ds_list_destroy(serverlist);
ds_list_destroy(servernames);

// destroy self
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// destroy broadcast server if game not closed properly
network_destroy(broadcast_server);
broadcast_server = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw server list
draw_set_font(fnt_buttons);
draw_set_color(c_white);
draw_set_halign(fa_left);
draw_text(10,41+10,"Select server");
draw_line(10,41+30, room_width-10,41+30);

var yindex = 41+40;
var count = ds_list_size(serverlist);
for(var i=0;i&lt;count;i++){
    draw_text(10,yindex, ds_list_find_value(serverlist, i)+"  "+ds_list_find_value(servernames, i)+"'s server" );
    yindex+=30;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
