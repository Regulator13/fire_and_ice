<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///menu variables

// paused - whether game is paused
global.paused = false;

// state - current game state
state = STATE_MAIN;

//buttons - holds menu buttons
buttons = ds_list_create();

//selected - selected button
selected = 0;

//inputBuffer - small buffer to slow down gamepad input
inputBuffer = 0;
//inputBufferMax
inputBufferMax = 4;
//inputFreeze - small amount of time inbetween menu switches
inputFreeze = 0;
// inputFreezeMax
inputFreezeMax = 4;

// score message, either restart or continue, used with space key
scoreMessage = "";

//tagLine
tagLine = "Now with#exploding corpses!";
//version
version = "1.04.4";
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///first menu
scr_menuInitMain();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///set player variables
players = ds_list_create();
nicknames = ds_list_create();
classes = ds_list_create();
// localControls - list holding which local players are in
localControls = ds_list_create();

// PlayerTotal - the total amount of current players
global.PlayerTotal = 0;

// localPlayers - hold all the local player input objects
localPlayers = ds_map_create();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///lobby menu
classOptions = ds_list_create(); //character list
ds_list_add(classOptions, "grinch", "yeti", "santa", "nutcracker", "reindeer");
teamMax = 10;
teams = ds_list_create();//used for selecting
gameTeams = ds_map_create();

names = ds_list_create();

// online
readys = ds_list_create();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///options menu

//load options
//open file
ini_open("options.ini");

//load data
section = string("default");
var str;

//gameMode
gameMode = ini_read_string(section, "gameMode", "Normal");

//nickNames
/*
str = ini_read_string(section, "nicknames", "");
if (str != "") ds_list_read(nicknameIdeas, str);
else nicknameIdeas = nicknamesDefault;
*/


//destroy default lists

//close file
ini_close(); 
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///paths menu

//paths
pathNames = ds_list_create();
paths = ds_map_create();

pathSelected = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///debug options menu

//load options
//open file
ini_open("options.ini");

//load data
section = string("debug");

//deactivateOutside
deactivateOutside = ini_read_string(section, "deactivateOutside", "All");
//yallVehicleCircles - draw helpful circles around vehicles selection radius
yallVehicleCircles = ini_read_string(section, "yallVehicleCircles", "Off");
//supplyPackValue - draw helpful circles around vehicles selection radius
supplyPackValue = ini_read_real(section, "supplyPackValue", 25);

//destroy default lists

//close file
ini_close(); 
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// game menu

//gameStart - if game just started
global.gameStart = true;

//path - name of current path
global.path = noone; //ds_map in ds_map paths
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///globals
global.Menu = id;
global.online = false;
global.haveserver = false; // set in obj_server
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// server
// list to hold data for different menus, lobby
serverData = ds_list_create();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// load controls

// controlSelected - selected controls in the controls menu
controlSelected = 0;
// controlsMax - the amount of controls
controlsMax = 2;

// check if file exists
if (file_exists("controls.ini")) {
    // load previous controls
    scr_loadControls();
    }
else {
    // load defaults
    scr_setControlsDefault(0, CONTROLS_MOUSE);
    // local 2
    scr_setControlsDefault(1, CONTROLS_KEYBOARD);
    
    // save controls
    scr_saveControls();
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///tutorial

// tutorial - whether this is the first time, no prior paths
global.tutorial = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///input

// check if game is paused
if !(instance_exists(obj_inputButton)) {
    // intitiate input
    // haxis - left or right
    var haxis = 0;
    // vaxis - up or down
    var vaxis = 0;
    // action - clicking
    var action = false;
    
    // gamepad input
    var input;
    // axisBuffer - buffer till push starts counting
    var axisBuffer = 0.4;
    
    // get input
    if (inputBuffer &lt; 0) {
        // gamepad input
        for (input = 0; input &lt; 4; input++) {
            haxis = gamepad_axis_value(input, gp_axislh);
            vaxis = gamepad_axis_value(input, gp_axislv);
            // axis check
            if (haxis &lt; axisBuffer and haxis &gt; -axisBuffer) haxis = 0;
            if (vaxis &lt; axisBuffer and vaxis &gt; -axisBuffer) vaxis = 0;
            // action
            if(gamepad_button_check_released(input, gp_face1)) action = true;
            }
        
        // keyboard input
        if (keyboard_check(vk_left) || keyboard_check(ord("A")) || keyboard_check(ord("J"))) haxis = -1;
        if (keyboard_check(vk_right) || keyboard_check(ord("D")) || keyboard_check(ord("L"))) haxis = 1;
        if (keyboard_check(vk_up) || keyboard_check(ord("W")) || keyboard_check(ord("I"))) vaxis = -1;
        if (keyboard_check(vk_down) || keyboard_check(ord("S")) || keyboard_check(ord("K"))) vaxis = 1;
        if (keyboard_check_pressed(vk_space) || keyboard_check_pressed(vk_enter)) action = true;  
        
        // judge input based on current state
        switch(state) {
            case STATE_PATHS:
                if (!global.online || global.online &amp;&amp; global.haveserver) {
                    // selector
                    selected = scr_incrementInBounds(selected, haxis, 0, ds_list_size(buttons)-1, true);
                    // path selector
                    pathSelected = scr_incrementInBounds(pathSelected, vaxis, 0, ds_list_size(pathNames)-1, true);
                    
                    //press button
                    if (action) {
                        //check if button exists
                        var button = ds_list_find_value(buttons, selected);
                        if (ds_list_size(buttons) &gt; 0 &amp;&amp; instance_exists(button)) {
                            with (button) {
                                event_user(0);
                                }
                            }
                        }
                    }
                // reset buffer if got input
                if (haxis != 0 || vaxis != 0 || action != false)
                    inputBuffer = inputBufferMax;
                break;
            case STATE_LOBBY:
                if !(global.online) {
                    // join input
                    var inputs = array_height_2d(global.controls);
                    for (i = 0; i &lt; inputs; i++) {
                        // check for join input
                        switch (global.controls[i, KEY_TYPE]) {
                            case CONTROLS_KEYBOARD:
                            case CONTROLS_MOUSE:
                                if (keyboard_check_released(global.controls[i, ACTION2_KEY])) {
                                    // join lobby
                                    if (is_undefined(localPlayers[? i])) {
                                        localPlayers[? i] = instance_create(0, 0, obj_localPlayer);
                                        localPlayers[? i].controls = i;
                                        // update the controls
                                        ds_list_replace(localControls, ds_list_size(localControls)-1, i);
                                        }
                                    else {
                                        // leave lobby
                                        scr_joinLobby(localPlayers[? i]);
                                        instance_destroy(localPlayers[? i]);
                                        ds_map_delete(localPlayers, i);
                                        }
                                    }
                                break;
                            default:
                                // gamepad input
                                if (gamepad_button_check_released(global.controls[i, KEY_TYPE], global.controls[i, ACTION2_KEY])) {
                                    // join lobby
                                    if (is_undefined(localPlayers[? i])) {
                                        localPlayers[? i] = instance_create(0, 0, obj_localPlayer);
                                        localPlayers[? i].controls = i;
                                        }
                                    else {
                                        instance_destroy(localPlayers[? i]);
                                        ds_map_delete(localPlayers, i);
                                        }
                                    }
                                break;
                            }
                        // check if local player is in
                        var Local = localPlayers[? i]
                        if (!is_undefined(Local) &amp;&amp; instance_exists(Local)) {
                            // set up input
                            var haxis = Local.inputs[LEFT_KEY]*-1 + Local.inputs[RIGHT_KEY];
                            var vaxis = Local.inputs[UP_KEY]*-1 + Local.inputs[DOWN_KEY];
                            var playerIndex = ds_list_find_index(players, Local.connectID);
                            
                            // teams
                            var newTeam = scr_incrementInBounds(ds_list_find_value(teams, playerIndex), vaxis, 0, teamMax, true);
                            ds_list_replace(teams, playerIndex, newTeam);
                            // characters
                            var classValue = ds_list_find_value(classes, playerIndex);
                            var classIndex = scr_incrementInBounds(ds_list_find_index(classOptions, classValue), haxis, 0, ds_list_size(classOptions)-1, true);
                            ds_list_replace(classes, playerIndex, ds_list_find_value(classOptions, classIndex));
                            // ready up
                            if (Local.inputs[LEFTSELC_KEY]) {
                                ds_list_replace(readys, playerIndex, scr_toggle(ds_list_find_value(readys, playerIndex)));
                                Local.inputs[LEFTSELC_KEY] = scr_toggleKey(Local.inputs[LEFTSELC_KEY]);
                                }
                            }
                        }
                    // if there is a player in the lobby
                    if (ds_list_size(players)) {
                        // check for start
                        var start = true; // set to false if a player is not ready
                        
                        // check if any player is not ready
                        for(i = 0; i &lt; ds_list_size(players); i++) {   
                            if !(ds_list_find_value(readys, i)) start = false;
                            }
                        
                        // start if all are ready
                        if (start) {
                            // start game
                            show_debug_message("All ready!");
                            
                            // switch to path menu
                            event_user(1);
                            }
                        }
                    }
                //press button
                if (action) {
                    //check if button exists
                    var button = ds_list_find_value(buttons, selected);
                    if (ds_list_size(buttons) &gt; 0 &amp;&amp; instance_exists(button)) {
                        with (button) {
                            event_user(0);
                            }
                        }
                    }
            
                break;
            case STATE_GAME:
                break; // do nothing
            default:
                //button controls
                var button = ds_list_find_value(buttons, selected);
                
                // selector
                if (!is_undefined(button)) {
                    if (instance_exists(button) &amp;&amp; button.action == "value" || button.action == "valueAction")
                        selected = scr_incrementInBounds(selected, vaxis, 0, ds_list_size(buttons)-1, true);
                    else
                        selected = scr_incrementInBounds(selected, haxis+vaxis, 0, ds_list_size(buttons)-1, true);
                    }
                else
                    selected = scr_incrementInBounds(selected, haxis+vaxis, 0, ds_list_size(buttons)-1, true);
                                
                //check if button exists
                if (ds_list_size(buttons) &gt; 0 &amp;&amp; instance_exists(button)) {
                    // check if value button
                    if (button.action == "value") {
                        // adjust value
                        button.value = scr_incrementInBounds(button.value, haxis, 0, ds_list_size(button.values)-1, true);
                        }
                    else if (button.action == "valueAction") {
                        // adjust value
                        button.value = scr_incrementInBounds(button.value, haxis, 0, ds_list_size(button.values)-1, true);
                        // if value changed do action
                        if (haxis != 0)
                            with (button) event_user(1);
                        }
                    // press button
                    if (action) {
                        with (button) {
                            event_user(0);
                            }
                        }
                    }
                // reset buffer if got input
                if (haxis != 0 || vaxis != 0 || action != false)
                    inputBuffer = inputBufferMax;
                break;
            }
        }
    else inputBuffer--;
    }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// client input
switch(state) {
    case STATE_LOBBY:
        if(global.online &amp;&amp; global.haveserver) {
            var Server = obj_server;
            // check for client input
            var count = ds_list_size(Server.iplist);
            var iplist = Server.iplist //store locally because it is called many times
            
            // check join key
            for(i=0;i&lt;count;i++) {   
                //get the ip
                var ip = ds_list_find_value(iplist,i);
        
                //get the player instance so that we can check it
                var inst = ds_map_find_value(Server.Clients, ip);
                
                // other input
                var playerIndex = ds_list_find_index(players, inst.connectID);

                // initiate input
                var vaxis = 0;
                var haxis = 0;
                
                // get input
                if (inst.inputs[UP_KEY] == KEY_PRESSED) {
                    vaxis = -1;
                    // unpress key
                    inst.inputs[UP_KEY] = scr_toggleKey(inst.inputs[UP_KEY]);
                    }
                if (inst.inputs[DOWN_KEY] == KEY_PRESSED) {
                    vaxis = 1;
                    // unpress key
                    inst.inputs[DOWN_KEY] = scr_toggleKey(inst.inputs[DOWN_KEY]);
                    }
                if (inst.inputs[LEFT_KEY] == KEY_PRESSED) {
                    haxis = -1;
                    // unpress key
                    inst.inputs[LEFT_KEY] = scr_toggleKey(inst.inputs[LEFT_KEY]);
                    }
                if (inst.inputs[RIGHT_KEY] == KEY_PRESSED) {
                    haxis = 1;
                    // unpress key
                    inst.inputs[RIGHT_KEY] = scr_toggleKey(inst.inputs[RIGHT_KEY]);
                    }
                if (inst.inputs[LEFTSELC_KEY] == KEY_PRESSED) {
                    ds_list_replace(readys, playerIndex, scr_toggle(ds_list_find_value(readys, playerIndex)));
                    // unpress key
                    inst.inputs[LEFTSELC_KEY] = scr_toggleKey(inst.inputs[LEFTSELC_KEY]);
                    }
                
                // teams
                var newTeam = scr_incrementInBounds(ds_list_find_value(teams, playerIndex), vaxis, 0, teamMax, true);
                ds_list_replace(teams, playerIndex, newTeam);
                // characters
                var classValue = ds_list_find_value(classes, playerIndex);
                var classIndex = scr_incrementInBounds(ds_list_find_index(classOptions, classValue), haxis, 0, ds_list_size(classOptions)-1, true);
                ds_list_replace(classes, playerIndex, ds_list_find_value(classOptions, classIndex));
                }
        
            // if there is a player in the lobby
            if (ds_list_size(players)) {
                // check for start
                var start = true; // set to false if a player is not ready
                
                // check if any player is not ready
                for(i = 0; i &lt; ds_list_size(players); i++) {   
                    if !(ds_list_find_value(readys, i)) start = false;
                    }
                
                // start if all are ready
                if (start) {
                    // start game
                    show_debug_message("All ready!");
                    
                    // switch to path menu
                    event_user(1);
                    }
                }
            }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="123">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///restart
if !(instance_exists(obj_inputButton)) {
    game_restart();
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="46">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// delete files
file_delete("controls.ini");
file_delete("paths.ini");
game_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///end game
if !(instance_exists(obj_inputButton)) {
    game_end();
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///change to debug options menu
state = STATE_DEBUGOPTIONS;

//save options
scr_saveOptions();
    
//clear buttons
for (var i = 0; i &lt; ds_list_size(buttons); i++) {
    with(ds_list_find_value(buttons, i)) instance_destroy();
    }
ds_list_clear(buttons);

//reset selected
selected = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///debug options menu
    /*
    var button = instance_create(room_width/2-32, 128, obj_button);
    with(button) {
        action = "value";
        title = "Deactivate Instance Outside of View";
        ds_list_add(values, "All", "All but Bombs and Walls", "None");
        value = ds_list_find_index(values, other.deactivateOutside);
        }
    ds_list_add(buttons, button);
    //yallVehicleCircles
    var button = instance_create(room_width/2-32, 128+32, obj_button);
    with(button) {
        action = "value";
        title = "Draw Command Vehicle Circles";
        ds_list_add(values, "On", "Off");
        value = ds_list_find_index(values, other.yallVehicleCircles);
        }
    ds_list_add(buttons, button);
    //supplyPackValue
    var button = instance_create(room_width/2-32, 128+32*2, obj_button);
    with(button) {
        action = "value";
        title = "Supply Pack Value";
        ds_list_add(values, 25, 50, 75);
        value = ds_list_find_index(values, other.supplyPackValue);
        }
    ds_list_add(buttons, button);
    */
    var button = instance_create(room_width/2, room_height-128, obj_button);
    button.image_index = 9;
    button.action = "delOptions";
    button.title = "delete options";
    button.sprite_index = spr_buttonLong;
    ds_list_add(buttons, button);
    var button = instance_create(room_width/2, room_height-80, obj_button);
    button.image_index = 8;
    button.action = "delMissions";
    button.title = "delete paths"
    button.sprite_index = spr_buttonLong;
    ds_list_add(buttons, button);
    var button = instance_create(room_width/2, room_height-32, obj_button);
    button.image_index = 4;
    button.action = "optionsDebug";
    button.title = "options";
    ds_list_add(buttons, button);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///change to options menu
state = STATE_OPTIONS;

//clear buttons
for (var i = 0; i &lt; ds_list_size(buttons); i++) {
    with(ds_list_find_value(buttons, i)) instance_destroy();
    }
ds_list_clear(buttons);

//reset selected
selected = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///options menu
scr_menuInitOptions();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///change to main from options
state = STATE_MAIN;

//save options
scr_saveOptions();
    
//clear buttons
for (var i = 0; i &lt; ds_list_size(buttons); i++) {
    with(ds_list_find_value(buttons, i)) instance_destroy();
    }
ds_list_clear(buttons);

//reset selected
selected = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///main menu
hb = 64;
var button = instance_create(room_width/2, 176+hb, obj_button);
button.image_index = 0;
button.action = "lobby";
ds_list_add(buttons, button);
var button = instance_create(room_width/2, 176+48+hb, obj_button);
button.image_index = 4;
button.action = "online";
ds_list_add(buttons, button);
var button = instance_create(room_width/2, 176+48*2+hb, obj_button);
button.image_index = 4;
button.action = "options";
ds_list_add(buttons, button);
var button = instance_create(room_width/2, room_height-64, obj_button);
button.image_index = 1;
button.action = "quit";
ds_list_add(buttons, button);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///attempt to set path
if (!global.online || (global.online &amp;&amp; global.haveserver)) {
    //set path
    global.path = ds_map_find_value(paths, ds_list_find_value(pathNames, pathSelected));
    }
/*
// debug
for (i = 0; i &lt; ds_list_size(global.path[? "seeds"]); i++;) {
    show_debug_message(string(ds_list_find_value(global.path[? "seeds"], i)));
    }
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///change to game menu
state = STATE_GAME;

//clear buttons
for (var i = 0; i &lt; ds_list_size(buttons); i++) {
    with(ds_list_find_value(buttons, i)) instance_destroy();
    }
ds_list_clear(buttons);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///create players
if (!global.online) {
    // setup
    var amount = ds_map_size(localPlayers);
    var key = ds_map_find_first(localPlayers);
    
    // iterate through each local player
    for (i = 0; i &lt; amount; i++;) {
        // get the local player
        var Local = localPlayers[? key];
        // setup up player object
        Local.playerId = ds_list_find_index(players, Local.connectID);
        Local.input = 1; //ds_list_find_value(players, connectID);
        Local.team = ds_list_find_value(teams, Local.playerId); //temporary
        Local.character = ds_list_find_value(classes, Local.playerId);
        Local.sprite_index = scr_getSprite(Local.character);
        //team
        var team = ds_map_find_value(gameTeams, Local.team);
        if (is_undefined(team)) {
            team = instance_create(0, 0, obj_team)
            team.team = Local.team;
            team.nickname = "Team " + string(team.team);
            ds_map_add(gameTeams, Local.team, team);
            }
        //add player to team
        ds_list_add(team.players, Local);
        Local.team = team;
        // get the next key
        key = ds_map_find_next(localPlayers, key);
        }
    }
else if (global.haveserver) {
    room_goto(rm_level);
    with(obj_server) {
        var count = ds_list_size(iplist);
        for(i = 0; i &lt; count; i++) {   
            //get the ip
            var ip = ds_list_find_value(iplist,i);
            //get the player instance so that we can check if it is ready
            player = ds_map_find_value(Clients, ip);
            
            // setup up player object
            player.playerId = ds_list_find_index(other.players, player.connectID);
            player.input = -1; //ds_list_find_value(players, connectID);
            player.team = ds_list_find_value(other.teams, player.playerId); //temporary
            player.character = ds_list_find_value(other.classes, player.playerId);
            player.sprite_index = scr_getSprite(player.character);
            //team
            var team = ds_map_find_value(other.gameTeams, player.team);
            if (is_undefined(team)) {
                team = instance_create(0, 0, obj_team)
                team.team = player.team;
                team.nickname = "Team " + string(team.team);
                ds_map_add(other.gameTeams, player.team, team);
                }
            //add player to team
            with (team) ds_list_add(players, other.player);
            player.team = team;
            }
        }
    } 
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///game menu

//goto room
room_goto(rm_level);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// online

// networkPlayer - networkPlayer object, if online
networkPlayer = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///change to missions menu

//clear buttons
for (var i = 0; i &lt; ds_list_size(buttons); i++) {
    with(ds_list_find_value(buttons, i)) instance_destroy();
    }
ds_list_clear(buttons);

// initiate path menu
scr_menuInitPaths();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// drop all local players
    var amount = ds_map_size(localPlayers);
    var key = ds_map_find_first(localPlayers);
    
    // iterate through each local player
    for (i = 0; i &lt; amount; i++;) {
        // get the local player
        var Local = localPlayers[? key];
        
        // drop player
        show_debug_message(" + " +string(Local.connectID));
        scr_joinLobby(Local);
        // destroy player object
        instance_destroy(Local);
        
        // get the next key
        key = ds_map_find_next(localPlayers, key);
        }
    
    // clear map
    ds_map_clear(localPlayers);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///save path if in game
if !(global.gameStart) { //game has been started
    //set length
    ds_map_replace(global.path, "length", ds_list_size(ds_map_find_value(global.path, "seeds")));
    
    //find high score
    highScore = 0;
    //iterate through teams
    for (var i = 0; i &lt; teamMax; i++){
        var team = ds_map_find_value(gameTeams, i);
        if !(is_undefined(team)) {
            var newScore = team.tScore;
            if (newScore &gt; highScore) {
                highScore = newScore;
                }
            }
        }
    //set high score
    ds_map_replace(global.path, "score", highScore);
    
    scr_savePath(); //save ALL paths
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw buttons
    //draw set up
    draw_set_font(fnt_buttons);
    draw_set_color(c_white);
    draw_set_valign(fa_middle);
    
    // bw - half button width
    var bw = 77;
    // bh - half button height
    var bh = 16;
    // ss - space for selector
    var ss = 48;
    
    //draw buttons
    for (var i = 0; i &lt; ds_list_size(buttons); i++) {
        var button = ds_list_find_value(buttons, i);
        if (button.action == "value" || button.action == "valueAction") {
            //draw value button
            draw_set_halign(fa_right);
            draw_text(button.x-bw-ss, button.y, button.title);
            draw_set_halign(fa_left);
            draw_text(button.x+bw+ss, button.y, string(ds_list_find_value(button.values, button.value)));
            draw_set_color(c_dkgray);
            draw_rectangle(button.x-bw, button.y-bh, button.x+bw, button.y+bh, true);
            draw_set_color(c_gray);
            var sliderWidth = (bw*2/ds_list_size(button.values))
            draw_rectangle(button.x-bw+1+button.value*sliderWidth, button.y-bh+1, button.x-bw+1+button.value*sliderWidth+sliderWidth, button.y+bh-1, false);
            draw_set_color(c_white);
            }
        else if (button.action == "controlButton") {
            // draw contol button
            draw_sprite(button.sprite_index, button.image_index, button.x, button.y)
            draw_set_halign(fa_center);
            draw_text(button.x, button.y, button.title);
            draw_set_halign(fa_right);
            draw_text(button.x-77-48, button.y, scr_keyToTitle(button.key));
            }
        else {
            draw_sprite(button.sprite_index, button.image_index, button.x, button.y)
            draw_set_halign(fa_center);
            if (button.title == "Default") draw_text(button.x, button.y, button.action);
            else draw_text(button.x, button.y, button.title);
            }
        }
    //draw selector
    if (ds_list_size(buttons) &gt; 0) {
        var button = ds_list_find_value(buttons, selected);
        if !(is_undefined(button)) {
        if (instance_exists(button)) {
            var woffset = button.sprite_width/2;
            var dx = button.x-woffset - 32;
            if (dx &lt; 0) {
                // draw selector on the other side
                draw_sprite_ext(spr_selector, -1, button.x+woffset+32, button.y, 1, 1, 180, c_white, 1);
                }
            else {
                draw_sprite(spr_selector, -1, button.x-woffset - 32, button.y);
                }
            }
            }
        }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///main menu
if (state == STATE_MAIN) {
    //draw title
    draw_sprite(spr_title, -1, room_width/2, room_height/6);
    
    //set up drawing
    draw_set_font(fnt_command);
    draw_set_colour(c_yellow);
    
    //tag line
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_text_ext_transformed(room_width/2+88+48, room_height/6+32, tagLine, 14, 300, 1, 1, 45);
    
    draw_set_colour(c_white);
    //draw
    draw_text(room_width/2+70, room_height/6+48, "V: " + string(version));
    draw_text(room_width/2, room_height-32, "Developed by: Gabriel Frey");
    
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///lobby menu
if (state == STATE_LOBBY) {
    //draw background
    //draw_sprite(spr_menu, 0, room_width/2, room_height-200);
    
    //set up drawing
    draw_set_font(fnt_command);
    draw_set_valign(fa_top);
    draw_set_color(c_white);
    
    var bh = 64;
    var sw = 32;
    
    // if online draw info from server
    if (global.online) {
        var attributes = 4; // attributes per player
        var playerAmount = ds_list_size(serverData); // amount of players * attributes
        // attribute order: team, ready, name, character
        var bh = 32;
        
        draw_set_halign(fa_left);
        // loop through and draw each player
        for (var i = 0; i &lt; playerAmount; i += attributes) {
            draw_rectangle(32, 32 + bh*i / attributes, room_width-32, 32+bh+bh*i / attributes, true);
            draw_text(48+sw, 40 + bh*i / attributes, "Team " + string(ds_list_find_value(serverData, i)));
            draw_text(128+sw, 40 + bh*i / attributes, "Ready: " + string(ds_list_find_value(serverData, i + 1)));
            draw_text(240+sw, 40 + bh*i / attributes, "Name: " + string(ds_list_find_value(serverData, i + 2)));
            draw_text(400+2*sw, 40 + bh*i / attributes, "Character: " + ds_list_find_value(serverData, i + 3));
            draw_sprite(spr_lobby, 0, 48, 46 + bh*i / attributes);
            draw_sprite(spr_lobby, 1, 426, 46 + bh*i / attributes);
            }
        
        // draw prompt
        draw_set_halign(fa_center);
        draw_set_font(fnt_buttons);
        var controls = 0;
        var prompt = scr_getInputName(global.controls[controls, LEFTSELC_KEY], LEFTSELC_KEY, global.controls[controls, KEY_TYPE]);
        draw_text(room_width/2, room_height-80, "Press " + prompt + " to ready up!");
        }
    else {
        // di - draw index
        var di = 0;
        
        draw_set_color(c_white)
        // iterate through each local player
        for (var i = 0; i &lt; ds_list_size(players); i ++) {
            draw_rectangle(32, 32 + bh*di, room_width-32, 32+bh+bh*i, true);
            draw_set_halign(fa_left);
            draw_text(48+sw, 40 + bh*di, "Team " + string(ds_list_find_value(teams, i)));
            draw_text(128+sw, 40 + bh*di, "Ready: " + string(ds_list_find_value(readys, i)));
            draw_text(240+sw*2, 40 + bh*di, "Character: " + ds_list_find_value(classes, i));
            draw_sprite(spr_lobby, 0, 48, 46 + bh*i);
            draw_sprite(spr_lobby, 1, 264, 46 + bh*i);
            draw_set_halign(fa_center);
            var controls = localControls[| i];
            var prompt = scr_getInputName(global.controls[controls, LEFTSELC_KEY], LEFTSELC_KEY, global.controls[controls, KEY_TYPE]);
            draw_text(room_width/2, 40 + bh*di+bh/2, "Press " + prompt + " to ready up!");
            // increment draw index
            di++
            }
        draw_set_color(c_gray)
        // iterate throuch each non joined local player
        for (var i = 0; i &lt; controlsMax; i++) {
            if (ds_list_find_index(localControls, i) == -1) {
                // if player is not yet in print prompt.
                draw_rectangle(32, 33 + bh*di, room_width-32, 33+bh+bh*di, true);
                var controls = i;
                var prompt = scr_getInputName(global.controls[controls, ACTION2_KEY], ACTION2_KEY, global.controls[controls, KEY_TYPE]);
                draw_text(room_width/2, 40-16+ bh*di+bh/2, "Press " + prompt + " to ready up!");
                // increment draw index
                di++
                }
            }
        }
    }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///options menu
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///paths menu
if (state == STATE_PATHS) {
    //set up drawing
    draw_set_font(fnt_command);
    draw_set_colour(c_white);
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    
    //draw title
    //draw_sprite(spr_menu, 1, room_width/2, room_height-200);
    
    // if online draw info from server
    if (global.online) {
        var attributes = 3; // attributes per path
        var offset = 1; // non-attribute list server data
        var pathAmount = ds_list_size(serverData); // amount of players * attributes
        // attribute order: name, score, length
        var drawOffset = 0;
        // loop through and draw each player
        for (var i = offset; i &lt; pathAmount; i += attributes) {
            draw_rectangle(32, 32 + 32*drawOffset, room_width-32, 64+32*drawOffset, true);
            draw_text(48, 40 + 32*drawOffset, ds_list_find_value(serverData, i));
            draw_text(304, 40 + 32*drawOffset, "High Score: " + string(ds_list_find_value(serverData, i + 1)));
            draw_text(480, 40 + 32*drawOffset, "Length: " + string(ds_list_find_value(serverData, i + 2)));
            drawOffset++;
            }
        
        //draw selected
        draw_sprite(spr_selector, -1, 16, 48 + 32*ds_list_find_value(serverData, 0));
        //draw_sprite(spr_selector, -1, 16, 48 + 32*pathSelected);
        }
    else {
        //draw selected room list
        for (var i = 0; i &lt; ds_list_size(pathNames); i ++) {
            draw_rectangle(32, 32 + 32*i, room_width-32, 64+32*i, true);
            name = ds_list_find_value(pathNames, i)
            path = ds_map_find_value(paths, name);
            draw_set_halign(fa_left);
            draw_set_valign(fa_top);
            draw_text(48, 40 + 32*i, name);
            draw_text(304, 40 + 32*i, "High Score: " + string(round(ds_map_find_value(path, "score"))));
            draw_text(480, 40 + 32*i, "Length: " + string(ds_map_find_value(path, "length")));
            }
    
        //draw selected
        draw_sprite(spr_selector, -1, 16, 48 + 32*pathSelected);
        }
    }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///game HUD
if (state == STATE_GAME) {
if (view_current == 1) {
    //display variables
    cx = view_xview[1]; //current x
    cy = 0; //current y
    HUDwidth = 128; //width of HUD
    HUDheight = 96; //height of HUD
    cSize = 32; //size of character
    
    if (global.online) {
        // index - current index in list
        var index = 0;
        //iterate through teams
        var teamAmount = ds_list_find_value(serverData, index++);
        
        for (var i = 1; i &lt; teamAmount; i++){
            var teamExists = ds_list_find_value(serverData, index++); // get teamExists
            if (teamExists) {
                var teamPlayers = ds_list_find_value(serverData, index++); // get amount of players
                //draw background
                var size = teamPlayers-1;
                yscale = 1+size*.5;
                draw_sprite_ext(spr_HUD, -1, cx, cy, 1, yscale, 0, c_white, 1);
                //setup drawing
                draw_set_font(fnt_command);
                draw_set_colour(c_white);
                draw_set_halign(fa_center);
                draw_set_valign(fa_top);
                //draw nickname
                tb = 2 //text buffer
                draw_text(cx+HUDwidth/2, cy+tb, ds_list_find_value(serverData, index++)); // get nickname
                //draw score and lives
                draw_set_halign(fa_left);
                
                draw_text(cx+tb, cy+tb*3+12, "SC: " + ds_list_find_value(serverData, index++)); // get score
                draw_text(cx+tb+72, cy+tb*3+12, "LV: " + ds_list_find_value(serverData, index++)); // get level
                draw_set_halign(fa_center);
                draw_text(cx+HUDwidth/2+tb, cy+tb*3+24, "Lives: " + ds_list_find_value(serverData, index++)); // get lives
                
                //players
                for (cp = 0; cp &lt; teamPlayers; cp++) {
                    //player
                    
                    //draw sprite
                    var sb = 8;
                    draw_sprite_ext(ds_list_find_value(serverData, index++), 0, cx+sb, cy+HUDheight/2+sb+cp*(cSize+sb*2), 2, 2, 0, c_white, 1);
                    if (ds_list_find_value(serverData, index++)) {
                        //draw health
                        bx = cx+sb*2+cSize;
                        by = cy+HUDheight/2+sb+cp*(cSize+sb*2)+sb;
                        bh = cSize/2-sb/2;
                        draw_healthbar(bx, by, bx+(HUDwidth/2), by+bh, ds_list_find_value(serverData, index++), c_dkgray, c_red, c_green, 0, true, true);
                        by += bh;
                        draw_healthbar(bx, by, bx+(HUDwidth/2), by+bh, ds_list_find_value(serverData, index++), c_dkgray, c_fuchsia, c_navy, 0, true, true);
                        }
                    }
                //add to cy
                cy += yscale*HUDheight;
                }
            }
        }
    else {
        //iterate through teams
        for (var i = 0; i &lt; teamMax; i++){
            var team = ds_map_find_value(gameTeams, i);
            if !(is_undefined(team)) {
                //draw background
                var size = ds_list_size(team.players)-1;
                yscale = 1+size*.5;
                draw_sprite_ext(spr_HUD, -1, cx, cy, 1, yscale, 0, c_white, 1);
                //setup drawing
                draw_set_font(fnt_command);
                draw_set_colour(c_white);
                draw_set_halign(fa_center);
                draw_set_valign(fa_top);
                //draw nickname
                tb = 2 //text buffer
                draw_text(cx+HUDwidth/2, cy+tb, team.nickname);
                //draw score and lives
                draw_set_halign(fa_left);
                draw_text(cx+tb, cy+tb*3+12, "SC: " + string(round(team.tScore)));
                draw_text(cx+tb+72, cy+tb*3+12, "LV: " + string(round(team.LVL)));
                draw_set_halign(fa_center);
                draw_text(cx+HUDwidth/2+tb, cy+tb*3+24, "Lives: " + string(team.tLives));
                
                //players
                for (cp = 0; cp &lt; ds_list_size(team.players); cp ++) {
                    //player
                    var player = ds_list_find_value(team.players, cp);
                    
                    //draw sprite
                    var sb = 8;
                    draw_sprite_ext(player.sprite_index, 0, cx+sb, cy+HUDheight/2+sb+cp*(cSize+sb*2), 2, 2, 0, c_white, 1);
                    if (instance_exists(player.gameCharacter)) {
                        //draw health
                        bx = cx+sb*2+cSize;
                        by = cy+HUDheight/2+sb+cp*(cSize+sb*2)+sb;
                        bh = cSize/2-sb/2;
                        draw_healthbar(bx, by, bx+(HUDwidth/2), by+bh, player.gameCharacter.hp, c_dkgray, c_red, c_green, 0, true, true);
                        by += bh;
                        draw_healthbar(bx, by, bx+(HUDwidth/2), by+bh, player.gameCharacter.energy, c_dkgray, c_fuchsia, c_navy, 0, true, true);
                        }
                    }
                //add to cy
                cy += yscale*HUDheight;
                }
            }
        }
    }
    }

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// score menu ONLINE ONLY!
if (global.online) {
    if (state == STATE_SCORE) {
        // setup drawing
        draw_set_font(fnt_score);
        draw_set_halign(fa_center);
        draw_set_colour(c_white);
        
        // draw title
        draw_text(room_width/2, 160, "Scores!");
        
        //display variables
        cx = room_width-128; //current x
        cy = 0; //current y
        var sy = 0; // score y
        HUDwidth = 128; //width of HUD
        HUDheight = 96; //height of HUD
        cSize = 32; //size of character
        
        // index - current index in list
        var index = 0;
        // get message, continue or restart
        scoreMessage = ds_list_find_value(serverData, index++);
        var seed = ds_list_find_value(serverData, index++);
        var water_delay = ds_list_find_value(serverData, index++);
        
        //iterate through teams
        var teamAmount = ds_list_find_value(serverData, index++);
        
        for (var i = 1; i &lt; teamAmount; i++){
            var teamExists = ds_list_find_value(serverData, index++); // get teamExists
            if (teamExists) {
                // get variables
                var teamPlayers = ds_list_find_value(serverData, index++); // get amount of players
                var nickname = ds_list_find_value(serverData, index++);
                var teamScore = ds_list_find_value(serverData, index++);
                var teamLevel = ds_list_find_value(serverData, index++);
                var teamLives = ds_list_find_value(serverData, index++);
                
                // draw score
                draw_set_font(fnt_score);
                draw_text(room_width/2, 200 + 26*sy++, nickname + " Score: " + teamScore + " Lives: " + teamLives);
                
                //draw background
                var size = teamPlayers-1;
                yscale = 1+size*.5;
                draw_sprite_ext(spr_HUD, -1, cx, cy, 1, yscale, 0, c_white, 1);
                //setup drawing
                draw_set_font(fnt_command);
                draw_set_colour(c_white);
                draw_set_halign(fa_center);
                draw_set_valign(fa_top);
                //draw nickname
                tb = 2 //text buffer
                draw_text(cx+HUDwidth/2, cy+tb, nickname); // get nickname
                //draw score and lives
                draw_set_halign(fa_left);
                
                draw_text(cx+tb, cy+tb*3+12, "SC: " + teamScore); // get score
                draw_text(cx+tb+72, cy+tb*3+12, "LV: " + teamLevel); // get level
                draw_set_halign(fa_center);
                draw_text(cx+HUDwidth/2+tb, cy+tb*3+24, "Lives: " + teamLives); // get lives
                
                //players
                for (cp = 0; cp &lt; teamPlayers; cp++) {
                    //player
                    
                    //draw sprite
                    var sb = 8;
                    draw_sprite_ext(ds_list_find_value(serverData, index++), 0, cx+sb, cy+HUDheight/2+sb+cp*(cSize+sb*2), 2, 2, 0, c_white, 1);
                    if (ds_list_find_value(serverData, index++)) {
                        //draw health
                        bx = cx+sb*2+cSize;
                        by = cy+HUDheight/2+sb+cp*(cSize+sb*2)+sb;
                        bh = cSize/2-sb/2;
                        draw_healthbar(bx, by, bx+(HUDwidth/2), by+bh, ds_list_find_value(serverData, index++), c_dkgray, c_red, c_green, 0, true, true);
                        by += bh;
                        draw_healthbar(bx, by, bx+(HUDwidth/2), by+bh, ds_list_find_value(serverData, index++), c_dkgray, c_fuchsia, c_navy, 0, true, true);
                        }
                    }
                //add to cy
                cy += yscale*HUDheight;
                }
            }
        
        //message
        draw_text(room_width/2, 160 + 26*i + 100, "Press SPACE to " + string(scoreMessage));
        draw_text(room_width/2, 160 + 26*i + 132, "Your room seed was: " + string(seed));
        draw_text(room_width/2, 160 + 26*i + 160, "Water Delay: " + string(water_delay));
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
