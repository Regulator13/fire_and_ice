<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_blockBig</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// initialize self

if (global.online &amp;&amp; !global.haveserver) instance_destroy();

//Set rate of water
water_height = 0;
water_buffer = true;

//globals
global.players = 0;

//player total
global.playerTotal = 5;

//score
global.scoreWin = 100;
global.scoreObject = 10;
global.scoreLife = 100; //score required to get a heart
//global.scoreY = room_height-/100; //not used
global.scoreLVL = 5;
global.scoreFirst = 25;

//global.cooperativeMode
global.cooperativeMode = false;

// small buffer to allow server to catch up
checkWinBuffer = 60;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///end level

//add scores
//iterate through teams
for (var i = 0; i &lt; obj_menu.teamMax; i++){
    var team = ds_map_find_value(obj_menu.gameTeams, i);
    if !(is_undefined(team)) {
        team.tScore += team.LVL*global.scoreLVL;
        }
    }

scr_stateSwitch(STATE_GAME, STATE_SCORE);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// @description Water Buffer
water_buffer = false


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// @description Raise Water
if(water_buffer = false)
{water_height += global.water_rate;
}

//check if all players died
if (checkWinBuffer &lt; 0) {
    if not (instance_exists(obj_character)) {
        //end level
        if (global.win) {
            global.level += 1;
            }
        else {
            global.continueGame = false;
            }
        //goto score
        if (gotoScore) {
            alarm[1] = 30;
            gotoScore = false;
            checkWinBuffer = 60;
            }
        }
    }
else checkWinBuffer --;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///game start
if (global.gameStart) {
    //set level
    global.level = 0;
    
    //whether or not can continue
    global.continueGame = true;
    
    if (global.cooperativeMode) {
        //water delay
        global.waterDelay = 1600;
        //water rate
        global.water_rate = .05;
        }
    else {
        //water delay
        global.waterDelay = 1000;
        //water rate
        global.water_rate = .1;
        }
    global.gameStart = false;
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///win
global.win = false;
gotoScore = true;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create room

//seed the random generator
if (global.continueGame) {
    //get seed
    seed = ds_list_find_value(ds_map_find_value(global.path, "seeds"), global.level);
    //show_debug_message(string(global.level) + string(seed));
    if (is_undefined(seed)) {
        // nseed - the seed for the path
        var nseed;
        // check if tutorial
        if (global.tutorial) {
            nseed = 2435157115;
            instance_create(0, 0, obj_tutorial);
            global.waterDelay = 2000;
            global.tutorial = false;
            }
        else {
            //get random seed
            randomize();
            nseed = random_get_seed();
            }
        // set seed
        random_set_seed(nseed);
        //save seed
        ds_list_insert(ds_map_find_value(global.path, "seeds"), global.level, nseed);  //global.level,
        }
    else {
        random_set_seed(seed);
        }
    }
else {
    random_set_seed(random_get_seed());
    //global.continueGame = true; //set after hearts generation
    }
    
alarm_set(0,global.waterDelay);//Set the delay before water rises
if (global.waterDelay &lt;= 0) water_buffer = false;

gridSize = 32;//Set the grid size
maxY = room_height - gridSize*2; //max y platforms are allowed to generate at

//For each row in the room, create a platform with 1 in x chance
for (i = 3; i &lt; maxY/gridSize; i += 1) {
    for(j = 0; j &lt; 1; j+=1) {
        if (irandom_range(0, 1) = 0) {
            dx = round(irandom_range(gridSize, room_width - gridSize)/gridSize)*gridSize;
            dy = i*gridSize;
            scr_platformGenerate(dx, dy, irandom_range(0, 6));
            }
        }
    }

//madatory
for (i = 3; i &lt; maxY/gridSize; i += 4) {
    for(j = 0; j &lt; 1; j+=1) {
        dx = round(irandom_range(gridSize, room_width - gridSize)/gridSize)*gridSize;
        dy = i*gridSize;
        scr_platformGenerate(dx, dy, irandom_range(0, 5));
        }
    }

//floor block generators
repeat(4) {
    dx = round(irandom_range(gridSize*4, room_height - gridSize*4)/gridSize)*gridSize;
    dy = room_height-gridSize-16;
    if (place_free(dx, dy-16)) with instance_create(dx, dy, obj_blockStation) sticky = true;
    }

//left side lasers
repeat(3) {
    dx = gridSize;
    dy = round(irandom_range(gridSize, room_height - gridSize)/gridSize)*gridSize;
    if (place_free(dx, dy)) with (instance_create(dx, dy, obj_laser)) {
        image_index = 0;
        dir = 1;
        }
    }
//right side lasers
repeat(3) {
    dx = room_width-gridSize-16;
    dy = round(irandom_range(gridSize, room_height - gridSize)/gridSize)*gridSize;
    //move left more to accomadate for bigger checking sprite
    if (place_free(dx-16, dy)) with (instance_create(dx, dy, obj_laser)) {
        image_index = 1;
        dir = -1;
        }
    }
    
//finish platform
var dx = round(irandom_range(gridSize*3, room_width - gridSize*3)/gridSize)*gridSize;
var dy = gridSize*2;

//create bottom
var i = 0;
repeat(3) {
    instance_create(dx+gridSize*i, dy, obj_blockBig);
    i ++;
    }
//create door
instance_create(dx+gridSize+8, dy-gridSize+4, obj_door);
    
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///generate health
if (global.continueGame) {
//random x and y
var gridSize = 32;
var rx = 0;
var ry = 0;
var tries = 1; //amount of healths
var whileTries = 0;
var whileTriesMax = 100; //limit amount of times loop can run
while(tries &gt; 0) {
    //set random coordinates
    rx = round(irandom_range(0, room_width)/gridSize)*gridSize;
    ry = round(irandom_range(0, room_height)/gridSize)*gridSize;
    
    //check if can place
    if (place_free(rx, ry)) {
        if (place_meeting(rx, ry+gridSize, obj_blockBig)) {
            instance_create(rx+gridSize/2, ry+gridSize/2, obj_health);
            tries -= 1;
            }
        }
    //limit amount of times loop can run
    whileTries -= 1;
    if (whileTries &gt; whileTriesMax) tries = 0;
    }
    }
else {
    global.continueGame = true;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// @description Draw Water
if (!global.online) {
    draw_set_alpha(.5);
    draw_rectangle_color(obj_wall.sprite_width,room_height-obj_wall.sprite_height, room_width-obj_wall.sprite_width, room_height-obj_wall.sprite_height-water_height, c_aqua, c_aqua, c_navy, c_navy, false);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// @description Insert description here
// You can write your code in this editor
game_restart();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// @description End game
game_end();

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
