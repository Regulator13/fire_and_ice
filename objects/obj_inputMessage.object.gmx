<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_inputButton</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///input

// set in creation:
// prompt - message to display
prompt = "";
// actions - actions to enact after key press
actions = ds_list_create();
// actionTitles - title for each action
actionTitles = ds_list_create();
// actionSel - current action selected
actionSel = 0;
// Source - who created it
Source = noone;

// inputBuffer - small buffer to slow down gamepad input
inputBuffer = 0;
// inputBufferMax
inputBufferMax = 4;

// pause game
global.paused = true;

show_debug_message("obj_inputMessage Created");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// clear all input
io_clear();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// unpause
global.paused = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///input

    // intitiate input
    // haxis - left or right
    var haxis = 0;
    // vaxis - up or down
    var vaxis = 0;
    // action - clicking
    var action = false;
    
    // gamepad input
    var input;
    // axisBuffer - buffer till push starts counting
    var axisBuffer = 0.4;
    
    // get input
    if (inputBuffer &lt; 0) {
        // gamepad input
        for (input = 0; input &lt; 4; input++) {
            haxis = gamepad_axis_value(input, gp_axislh);
            vaxis = gamepad_axis_value(input, gp_axislv);
            // axis check
            if (haxis &lt; axisBuffer and haxis &gt; -axisBuffer) haxis = 0;
            if (vaxis &lt; axisBuffer and vaxis &gt; -axisBuffer) vaxis = 0;
            // action
            if(gamepad_button_check_released(input, gp_face1)) action = true;
            }
        
        // keyboard input
        if (keyboard_check(vk_left) || keyboard_check(ord("A")) || keyboard_check(ord("J"))) haxis = -1;
        if (keyboard_check(vk_right) || keyboard_check(ord("D")) || keyboard_check(ord("L"))) haxis = 1;
        if (keyboard_check(vk_up) || keyboard_check(ord("W")) || keyboard_check(ord("I"))) vaxis = -1;
        if (keyboard_check(vk_down) || keyboard_check(ord("S")) || keyboard_check(ord("K"))) vaxis = 1;
        if (keyboard_check_pressed(vk_space) || keyboard_check_pressed(vk_enter)) action = true;
        
        // check for input
        
        // change action selected
        actionSel = scr_incrementInBounds(actionSel, haxis + vaxis, 0, ds_list_size(actions)-1, true);
        
        // check if pressed
        if (action) {
            event_user(0);
            instance_destroy();
            }
        
        // reset inputBuffer
        if (haxis != 0 || vaxis != 0 || action != 0)
            inputBuffer = inputBufferMax;
        }
    else 
        inputBuffer--;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///press button
switch(actions[| actionSel]) {
    case "lobby":
        // switch to lobby menu
        scr_stateSwitch(global.Menu.state, STATE_LOBBY);
        break;
    case "game":
        //play button - switch button
        with(obj_menu) event_user(2);
        break;
    case "missions":
        //play button - switch button
        with(obj_menu) event_user(1);
        break;
    case "mainOptions":
        //play button - switch button
        with(obj_menu) event_user(4);
        break;
    case "options":
        //play button - switch button
        with(obj_menu) event_user(5);
        break;
    case "debugOptions":
        //play button - switch button
        with(obj_menu) event_user(6);
        break;
    case "optionsDebug":
        // fo from the debug menu to options menu
        scr_stateSwitch(STATE_DEBUGOPTIONS, STATE_OPTIONS);
        break;
    case "mainControl":
        // go from the control menu to the options menu
        scr_stateSwitch(STATE_CONTROLS, STATE_MAIN);
        break;
    case "optionsControl":
        // go from the control menu to the options menu
        scr_stateSwitch(STATE_CONTROLS, STATE_OPTIONS);
        break;
    case "addNickname":
        //add nickname
        with(instance_create(room_width/2, room_height/2, obj_inputButton)) action = "addNickname";
        break;
    case "delNickname":
        //add nickname
        with(instance_create(room_width/2, room_height/2, obj_inputButton)) action = "delNickname";
        break;
    case "delOptions":
        //delete file
        file_delete(obj_menu.gameMode + ".ini");
        game_restart();
        break;
    case "delMissions":
        //delete file
        file_delete("paths.ini");
        game_restart();
        break;
    case "delControls":
        //delete file
        file_delete("controls.ini");
        game_restart();
        break;
    case "controls":
        //open controls menu
        with(obj_menu) {
            scr_menuInitControls();
            //reset selected
            selected = 0;
            }
        break;
    case "online":
        //open controls menu
        with(obj_menu) scr_menuInitOnline();
        break;
    case "createServer":
        //host server
        global.InitObject.alarm[1] = 2;
        break;
    case "directConnect":
        //host server
        global.InitObject.alarm[2] = 2;
        break;
    case "new":
        //new path
        with(instance_create(room_width/2, room_height/2, obj_inputButton)) action = "createPath";
        break;
    case "backMainLobby":
        // return to main menu from the online menu
        scr_stateSwitch(STATE_LOBBY, STATE_MAIN);
        break;
    case "backMainOnline":
        // return to main menu from the online menu
        scr_stateSwitch(STATE_ONLINE, STATE_MAIN);
        break;
    case "backOnlineLobby":
        // return to online menu from the lobby
        scr_stateSwitch(STATE_LOBBY, STATE_ONLINE);
        break;
    case "backOnlinePaths":
        // return to online menu from the lobby
        scr_stateSwitch(STATE_PATHS, STATE_ONLINE);
        break;
    case "backOnlineGame":
        // return to online menu from the lobby
        scr_stateSwitch(STATE_GAME, STATE_ONLINE);
        break;
    case "backOnlineScore":
        // return to online menu from the lobby
        scr_stateSwitch(STATE_SCORE, STATE_ONLINE);
        break;
    case "resetDisconnectBuffer":
        // reset client disconnect buffer
        global.Client.alarm[0] = global.Client.disconnectBuffer;
        break;
    case "resetDropBuffer":
        // reset networkPlayer drop buffer
        Source.alarm[0] = Source.dropBuffer;
        break;
    case "dropPlayer":
        // drop player
        with (Source) event_user(1);
        break;
    case "restart":
        game_restart();
        break;
    case "quit":
        game_end();
        break;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw message + action options

//setup drawing
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_set_font(fnt_buttons);
draw_set_alpha(1);

var sb = 8; // side buffer
// get box size
var pw;
var ph = 16*2;
var aw = 0; // width of actions
var ro = 2*8; // rows
var mw = string_width(prompt); // width of message

// get actions width
var s = 0; // spacing between buttons
for (var i = 0; i &lt; ds_list_size(actions); i++;)
    aw += string_width(actionTitles[| i])+sb*2+sb*s++;

// set box width
if (aw &gt; mw)
    pw = aw/2+sb;
else
    pw = mw/2+sb;

// box drawing
draw_set_color(c_dkgray);
draw_rectangle(x-pw, y-ph, x+pw, y+ph, false);
draw_set_color(c_gray);
draw_rectangle(x-pw, y-ph, x+pw, y+ph, true);
draw_set_color(c_white);
draw_text(x, y-ro, prompt);

// action drawing
draw_set_halign(fa_left);
var dx = x-aw/2+sb;
var dy = y+ro;
var bh = 16;
for (var i = 0; i &lt; ds_list_size(actions); i++;) {
    var bw = string_width(actionTitles[| i])+sb*2;
    draw_set_color(c_dkgray);
    draw_rectangle(dx, dy-bh, dx+bw, dy+bh, false);
    if (i == actionSel)
        draw_set_color(c_blue);
    else
        draw_set_color(c_gray);
    draw_rectangle(dx, dy-bh, dx+bw, dy+bh, true);
    draw_set_color(c_white);
    draw_text(dx+sb, y+ro, actionTitles[| i]);
    dx += bw+sb
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
