<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_pirahna</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>srv_basic</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

//playerId - player id for score
playerId = 0;

//Set player variables
hp = 100;
hp_max = 100;
energy = 100;
energy_max = 100;
strength = 60;

//jumps - amount of jumps character has
jumpsMax = 1;
jumps = 0;
//jumpHeight - inital vspeed of jump
jumpHeight = 6;

//gravity
gravityMax = 10;
//gravityI - gravity icreasing increment
gravityI = 0.4;
fric = .4 //Set all objects friction

//playerInput
playerInput = 0;
// InputPlayer - input player local or network
InputPlayer = noone;

//inputBuffer - buffer for joystick input
inputBuffer = 0;
inputBufferMax = 10;

//stop animation
image_speed = 0;
image_index = 4;
//start frames later when biting
bitingFrame = 9;
//frameStep - current frame for animation
frameStep = 0;
//frameBuffer - slow animation
frameBuffer = 0;
frameBufferMax = 4;

//biting - whether or not character is biting
biting = false;

//grabing
grabObject = noone;

//holding - 0 for let go next time, 2 to throw
holding = 0;

//dir - direction of character
dir = 0;

//energyFire - energy it takes for a fireball
energyFire = 5;

//willArc - whether or not ball arcs for player
willArc = false;

//yMin - heighest y value reached
yMin = room_height;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// initialize input variables

// inputType - the type of input, keyboard, mouse, joystick
inputType = CONTROLS_KEYBOARD;

// initiate isPressed variable outside, so they don't automatically reset
grabIsPressed = false;
iceIsPressed = false;
fireIsPressed = false;

// mouseX - x position of mouse if mouse input
mouseX = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// input

// check if active
    //input
    //left, up, right, down, action - keys
    haxis1 = 0;
    vaxis1 = 0;
    jumpPressed = false;
    //iceIsPressed = false;
    icePressed = false;
    iceReleased = false;
    handicapReleased = false;
    grabPressed = false;
    //grabIsPressed = false;
    grabReleased = false;
    //fireIsPressed = false;
    firePressed = false;
    fireReleased = false;

    //inputBuffer - for joystick input
    if (inputBuffer &gt; 0) inputBuffer -= 1;
    
    //axisBuffer - buffer till push starts counting
    axisBuffer = 0.4;
    
    //Player
    switch(playerInput) {
        case -1:
        case 1:
            // online input
            if(InputPlayer.inputs[LEFT_KEY]) haxis1 = -1;
            if(InputPlayer.inputs[RIGHT_KEY]) haxis1 = 1;
            if(InputPlayer.inputs[UP_KEY] == KEY_PRESSED) vaxis1 = -1;
            if(InputPlayer.inputs[DOWN_KEY] == KEY_PRESSED) vaxis1 = 1;
            if(InputPlayer.inputs[ACTION_KEY] == KEY_PRESSED) {
                jumpPressed = true;
                //unpress key
                InputPlayer.inputs[ACTION_KEY] = KEY_RELEASED;
                }
            if(InputPlayer.inputs[LEFTSELC_KEY] == KEY_PRESSED) {
                icePressed = true;
                iceIsPressed = true;
                grabPressed = true;
                grabIsPressed = true;
                }
            if(InputPlayer.inputs[LEFTSELC_KEY] == KEY_RELEASED) {
                iceReleased = true;
                iceIsPressed = false;
                grabReleased = true;
                grabIsPressed = false;
                }
            if (InputPlayer.inputs[RIGHTSELC_KEY] == KEY_PRESSED) {
                firePressed = true;
                fireIsPressed = true;
                }
            if (InputPlayer.inputs[RIGHTSELC_KEY] == KEY_RELEASED) {
                fireReleased = true;
                fireIsPressed = false;
                }
            break;
        case 0:
            //input
            if (alarm[0] &lt;= 0) {
                haxis1 = choose(1, 0, -1);
                haxis1 = choose(1, 0, -1);
                action = choose(false, true);
                alarm[0] = irandom_range(10, 20);
                }
            break;
        }
    
    // moveSpeed - speed of character
    var moveSpeed;
    // gravityMax - maximum gravity speed
    var gravityMax;
    // biting - whether pirahna is out of water
    var biting;
    
    // check if player is underwater
    if (y &gt; room_height-obj_wall.sprite_height-obj_control.water_height) {
        move_speed = 4;
        gravityMax = 1;
        biting = false;
        }
    else {
        move_speed = 1;
        gravityMax = 10;
        biting = true;
        }
    
    // find current hspeed
    if !(haxis1 &gt; -axisBuffer and haxis1 &lt; axisBuffer and vaxis1 &gt; -axisBuffer and vaxis1 &lt; axisBuffer) {
        hspeed = haxis1*move_speed;
        //direction
        if (hspeed != 0) dir = sign(hspeed);
        //image_angle = dir;
        }
    else {
        if (!place_free(x+hspeed,y+1)) hspeed = 0;
        }

    // if mouse controls, set direction based on mouse
    if (inputType == CONTROLS_MOUSE) {
        if (InputPlayer.mouseX != mouseX) {
            if (InputPlayer.mouseX &gt; x) dir = 1;
            else dir = -1;
            mouseX = InputPlayer.mouseX;
            }
        }
             
    //image
    switch (dir) {
        case 0:
            image_index = 4;
            break;
        case 1:
            image_index = 5+frameStep;
            break;
        case -1:
            image_index = 0;
            break
        default:
            image_index = 4+frameStep;
            break;
        }
    
    //animate
    if (hspeed != 0) {
        if (frameBuffer &lt; 0) {
            frameStep += 1;
            frameBuffer = frameBufferMax;
            }
        else frameBuffer --;
        }
    //keep animation in bounds
    if (frameStep &gt; 3) frameStep = 0;
    //crouching image
    if (biting) image_index += bitingFrame;

    //------------------------------------------------------------------
    //Main Code
    //------------------------------------------------------------------
    
    //update yMin
    if (y &lt; yMin) yMin = y;

    // Jump
    if (jumps &gt; 0) {
        if (jumpPressed) {
            vspeed = -jumpHeight;
            jumps -= 1;
            }
        }

    //push blocks
    with(instance_place(x+sign(hspeed)*2,y,par_physics))
        {
        if (id != other.grabObject &amp;&amp; not frozen &amp;&amp; !stuck) {
            x+=scr_contactx(other.hspeed);
            }
        }

    // Apply gravity (and jumping)
    if (vspeed &lt; gravityMax) {
        //gravity increment
        vspeed += gravityI
        }
    //keep gravity in bounds
    if (vspeed &gt; gravityMax) vspeed = gravityMax;
    
    //collide with solid objects
    while(!place_free(x+hspeed, y)) {
        hspeed = scr_reduce(hspeed);
        if hspeed = 0 break;
        }
    while(!place_free(x+hspeed,y+vspeed)) {
        vspeed = scr_reduce(vspeed);
        if vspeed = 0 {
            //reset jumps
            jumps = jumpsMax;
            break;
            }
        }

    // destory blocks
    if (firePressed) {
        with (instance_place(x, y, obj_block)) instance_destroy();
        with (instance_place(x, y, obj_corpse)) instance_destroy();
        }

    // reset jumps the player if is below water
    if(y &gt; room_height-obj_wall.sprite_height-obj_control.water_height) {
        jumps = jumpsMax;
        }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
