<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_block</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>par_physics</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set block type
// You can write your code in this editor
image_speed = 0;

//inherited
event_inherited();

//hpNormal - normal hp of block
hpNormal = 3;
hpMax= 4;
hp = hpNormal;

//sticky - whether or not object is sticky
sticky = false;
stuck = false; //whether or not block is stuck to something

// moochProof - last team to act on it for mooching
moochProof = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// freeze buffer particle
if (freezeBuffer &lt; freezeBufferMax &amp;&amp; freezeBuffer &gt;= 1*30) {
    switch (freezeBuffer) {
        case 3*30-1:
            with (instance_create(x+8, y-16, prt_countdown)) image_index = 0;
            break;
        case 2*30:
            with (instance_create(x+8, y-16, prt_countdown)) image_index = 1;
            break;
        case 1*30:
            with (instance_create(x+8, y-16, prt_countdown)) image_index = 2;
            break;
        }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set block type
// You can write your code in this editor

//hp
if (hp &lt; 0) instance_destroy();
if (hp &gt; hpMax) hp = hpMax;

//freezeBuffer
if (willFreeze) {
    //freeze buffer
    if (freezeBuffer &lt; 0*30) {
        frozen = true;
        active = true;
        hp = hpNormal+1;
        willFreeze = false;
        freezeBuffer = freezeBufferMax;
        }
    else freezeBuffer -= 1;
    }
//explode
if (ignite) {
    //freeze buffer
    if (freezeBuffer &lt; 0*30) {
        instance_create(x+sprite_width/2, y+sprite_height/2, obj_explosion);
        instance_destroy();
        }
    else freezeBuffer -= 1;
    }

//freeze
if (hp &gt; hpNormal) {
    active = false;
    frozen = true;
    }
else {
    if (frozen) {
        //unfreeze
        active = true;
        freezeBuffer = freezeBufferMax;
        willFreeze = false;
        }
    frozen = false;
    }

//set image
image_index = hp;

//sticky
if (sticky) {
    sprite_index = spr_blockSticky;
    fric = 4;
    
    //stick
    if !(instance_exists(holder)) { //if not being held
        if(!place_free(x+hspeed, y)) {
            //stop
            hspeed = 0;
            vspeed = 0;
            //stick
            active = false; //ignore physics
            stuck = true; //keep solid
            }
        }
    }
else fric = .4 + hpNormal-hp;

//inherited
event_inherited();

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// explosions
with(instance_place(x, y, obj_explosion)) {   
    other.hp -= damage;
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
